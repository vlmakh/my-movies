{"version":3,"file":"static/js/308.40351710.chunk.js","mappings":"+PAce,SAASA,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAmB,IAA/C,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,GAAE,QACf,GAAoCN,EAAAA,EAAAA,UAAS,GAA7C,eAAOO,EAAP,KAAmBC,EAAnB,KACA,GAAsCC,EAAAA,EAAAA,MAAtC,eAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAcC,OAAOH,EAAYI,IAAI,SACvCD,OAAOH,EAAYI,IAAI,SACvB,GAGJC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAHa,IAGWJ,EAAc,GACtCK,EAJa,GAIQL,GAE3BM,EAAAA,EAAAA,IAAmBpB,EAASO,GAAMc,MAAK,SAAAC,GACrClB,EACEkB,EAAKC,KACFC,MACC,SACEC,EACAC,GAFF,eAIE,UAACA,EAAEC,oBAAH,QAAmBD,EAAEE,iBAArB,UACCH,EAAEE,oBADH,QACmBF,EAAEG,gBACjB,GACC,CAPP,IASDC,QAAO,SAACC,EAAQC,GAAT,OAAyBA,GAAOb,GAASa,EAAMZ,CAA/C,KAGZT,EAAcsB,KAAKC,KAAKX,EAAKC,KAAKW,OAtBjB,IAuBlB,GACF,GAAE,CAAC3B,EAAMP,EAASc,IAMnB,OACE,iCACE,SAAC,KAAD,UACGX,EAAOgC,KAAI,SAAAC,GAAK,OACf,SAAC,KAAD,WACE,SAAC,KAAD,CAASC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMnC,GAAnD,UACE,SAAC,IAAD,CAAW+B,MAAOA,OAFXA,EAAME,GADF,MASlB7B,EAAa,IACZ,SAAC,IAAD,CACEgC,WAAW,MACXC,UAAU,IACVC,aApBgB,SAACC,GACvB/B,EAAe,CAAEgC,KAAMD,EAAEE,SAAW,GACrC,EAmBOC,mBAAoB,EACpBC,UAAWvC,EACXwC,cAAc,IACdC,sBAAsB,WACtBC,gBAAgB,aAChBC,UAAWtC,EAAc,MAKlC,C,mGC9EYuC,GAAmBC,EAAAA,EAAAA,GAAOC,IAAPD,CAAH,8eAKd,SAACE,GAAD,OAAmDA,EAAEC,MAAMC,UAAUC,CAArE,IAQF,SAACH,GAAD,OAA0DA,EAAEC,MAAMG,OAAOC,WAAzE,IAKE,SAACL,GAAD,OAAqDA,EAAEC,MAAMG,OAAOE,MAApE,IAKF,SAACN,GAAD,OAAqDA,EAAEC,MAAMG,OAAOE,MAApE,G","sources":["components/ActorMovies/ActorMovies.tsx","components/Pagination/Pagination.tsx"],"sourcesContent":["import { List, Item } from 'components/BaseComps/BaseComps';\nimport { useState, useEffect } from 'react';\nimport {\n  useParams,\n  useLocation,\n  NavLink,\n  useSearchParams,\n} from 'react-router-dom';\nimport { fetchMoviesByActor } from 'services/api';\nimport { MovieCard } from 'components/MovieCard/MovieCard';\nimport { t } from 'i18next';\nimport { IMovie } from 'components/types';\nimport { PaginationStyled } from 'components/Pagination/Pagination';\n\nexport default function ActorMovies() {\n  const { actorId } = useParams() as any;\n  const [movies, setMovies] = useState<IMovie[]>([]);\n  const location = useLocation();\n  const lang = t('lang');\n  const [totalPages, setTotalPages] = useState(1);\n  const [searchQuery, setSearchQuery] = useSearchParams() as any;\n  const currentPage = Number(searchQuery.get('page'))\n    ? Number(searchQuery.get('page'))\n    : 1;\n  const itemsPerPage = 20;\n\n  useEffect(() => {\n    const start = itemsPerPage * (currentPage - 1);\n    const end = itemsPerPage * currentPage;\n\n    fetchMoviesByActor(actorId, lang).then(data => {\n      setMovies(\n        data.cast\n          .sort(\n            (\n              a: { release_date: any; first_air_date: any },\n              b: { release_date: any; first_air_date: any }\n            ) =>\n              (b.release_date ?? b.first_air_date) >\n              (a.release_date ?? a.first_air_date)\n                ? 1\n                : -1\n          )\n          .filter((_: any, ind: number) => ind >= start && ind < end)\n      );\n\n      setTotalPages(Math.ceil(data.cast.length / itemsPerPage));\n    });\n  }, [lang, actorId, currentPage]);\n\n  const handlePageClick = (e: { selected: number }) => {\n    setSearchQuery({ page: e.selected + 1 });\n  };\n\n  return (\n    <>\n      <List>\n        {movies.map(movie => (\n          <Item key={movie.id}>\n            <NavLink to={`/movies/${movie.id}`} state={{ from: location }}>\n              <MovieCard movie={movie} />\n            </NavLink>\n          </Item>\n        ))}\n      </List>\n\n      {totalPages > 1 && (\n        <PaginationStyled\n          breakLabel=\"...\"\n          nextLabel=\">\"\n          onPageChange={handlePageClick}\n          pageRangeDisplayed={5}\n          pageCount={totalPages}\n          previousLabel=\"<\"\n          disabledLinkClassName=\"disabled\"\n          activeClassName=\"activePage\"\n          forcePage={currentPage - 1}\n        />\n      )}\n    </>\n  );\n}\n","import styled from '@emotion/styled';\nimport ReactPaginate from 'react-paginate';\n\nexport const PaginationStyled = styled(ReactPaginate)`\n  display: flex;\n  list-style: none;\n  justify-content: center;\n  margin-top: 16px;\n  font-size: ${(p: { theme: { fontSizes: { s: string; }; }; }) => p.theme.fontSizes.s};\n  font-weight: 700;\n\n  @media (max-width: 479.98px) {\n    flex-wrap: wrap;\n  }\n\n  & li {\n    color: ${(p: { theme: { colors: { textPrimary: string; }; }; }) => p.theme.colors.textPrimary};\n\n    transition: color 250ms linear;\n\n    :hover:not(.disabled) {\n      color: ${(p: { theme: { colors: { accent: string; }; }; }) => p.theme.colors.accent};\n    }\n  }\n\n  & .activePage {\n    color: ${(p: { theme: { colors: { accent: string; }; }; }) => p.theme.colors.accent};\n  }\n\n  & a {\n    padding: 0 8px;\n    cursor: pointer;\n  }\n\n  & a.disabled {\n    cursor: default;\n  }\n`;\n"],"names":["ActorMovies","actorId","useParams","useState","movies","setMovies","location","useLocation","lang","t","totalPages","setTotalPages","useSearchParams","searchQuery","setSearchQuery","currentPage","Number","get","useEffect","start","end","fetchMoviesByActor","then","data","cast","sort","a","b","release_date","first_air_date","filter","_","ind","Math","ceil","length","map","movie","to","id","state","from","breakLabel","nextLabel","onPageChange","e","page","selected","pageRangeDisplayed","pageCount","previousLabel","disabledLinkClassName","activeClassName","forcePage","PaginationStyled","styled","ReactPaginate","p","theme","fontSizes","s","colors","textPrimary","accent"],"sourceRoot":""}