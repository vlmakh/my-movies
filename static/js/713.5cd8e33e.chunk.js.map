{"version":3,"file":"static/js/713.5cd8e33e.chunk.js","mappings":"wQAUe,SAASA,EAAT,GAA2C,IAAxBC,EAAuB,EAAvBA,OAChC,GADuD,EAAfC,aACVC,EAAAA,EAAAA,UAAS,KAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,GAAE,QAUf,OARAC,EAAAA,EAAAA,YAAU,WACRC,SAASC,MAAT,uBAAgCH,EAAAA,EAAAA,GAAE,iBAElCI,EAAAA,EAAAA,GAAmBZ,EAAQO,GAAMM,MAAK,SAAAC,GACpCV,EAAWU,EACZ,GACF,GAAE,CAACP,EAAMP,KAGR,UAAC,KAAD,YACE,SAAC,KAAD,WAAYQ,EAAAA,EAAAA,GAAE,oBAEd,SAAC,KAAD,UACGL,EAAQY,KAAI,SAAAC,GAAK,OAChB,SAAC,KAAD,WACE,SAAC,KAAD,CAASC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMf,GAAnD,UACE,SAAC,IAAD,CAAWW,MAAOA,OAFXA,EAAME,GADD,QAUzB,C","sources":["pages/Library.js"],"sourcesContent":["import { PageWrap } from 'components/Box/Box';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { PageTitle, List, Item } from 'components/BaseComps/BaseComps';\nimport 'index.css';\nimport { MovieCard } from 'components/MovieCard/MovieCard';\nimport { fetchLibraryMovies } from 'services/api';\nimport PropTypes from 'prop-types';\nimport { t } from 'i18next';\n\nexport default function Library({ movies, currentLang }) {\n  const [library, setLibrary] = useState([]);\n  const location = useLocation();\n  const lang = t('lang');\n\n  useEffect(() => {\n    document.title = `My Movies | ${t('nav.library')}`;\n\n    fetchLibraryMovies(movies, lang).then(data => {\n      setLibrary(data);\n    });\n  }, [lang, movies]);\n\n  return (\n    <PageWrap>\n      <PageTitle>{t('title.library')}</PageTitle>\n\n      <List>\n        {library.map(movie => (\n          <Item key={movie.id}>\n            <NavLink to={`/movies/${movie.id}`} state={{ from: location }}>\n              <MovieCard movie={movie} />\n            </NavLink>\n          </Item>\n        ))}\n      </List>\n    </PageWrap>\n  );\n}\n\nLibrary.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n"],"names":["Library","movies","currentLang","useState","library","setLibrary","location","useLocation","lang","t","useEffect","document","title","fetchLibraryMovies","then","data","map","movie","to","id","state","from"],"sourceRoot":""}