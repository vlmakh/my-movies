{"version":3,"file":"static/js/847.bde817bb.chunk.js","mappings":"wTA4Be,SAASA,EAAT,GAAyD,IAAD,MAAhCC,EAAgC,EAAhCA,qBAAsBC,EAAU,EAAVA,OAC3D,GAAkCC,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,QAAM,oBAACL,EAASM,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAChD,GAA0BZ,EAAAA,EAAAA,YACxBD,EAAOc,SAASN,EAAOO,UADzB,eAAOC,EAAP,KAAcC,EAAd,KAGA,GAAkChB,EAAAA,EAAAA,WAAS,GAA3C,eAAOiB,EAAP,KAAkBC,EAAlB,KACMC,GAAOC,EAAAA,EAAAA,GAAE,QAETC,EAAc,WAClBH,GAAcD,EACf,EAqBD,OAVAK,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAehB,EAAOO,QAASK,GAC5BK,MAAK,SAAAC,GACJvB,EAAauB,EACd,IACAC,OAAM,SAAAvB,GACLC,GAAS,EACV,GACJ,GAAE,CAACe,EAAMZ,EAAOO,WAGf,UAAC,KAAD,YACE,SAAC,KAAD,CAAaa,GAAIlB,EAASmB,QAA1B,SACInB,EAASmB,QAAQC,UAA+BT,EAAAA,EAAAA,GAAE,iBAAtBA,EAAAA,EAAAA,GAAE,kBAGjCjB,IAAS,SAAC,UAAD,IAETF,IACC,iCACE,SAAC,KAAD,UAAcA,EAAU6B,SACxB,UAAC,KAAD,YACE,SAAC,KAAD,WACE,SAAC,KAAD,CACEC,MAAM,MACNC,IACE/B,EAAUgC,YAAV,0CACuChC,EAAUgC,aAC7CC,EAENC,IAAG,UAAKlC,EAAU6B,OAClBM,QAASf,OAIb,UAAC,KAAD,YACE,SAAC,KAAD,UACGpB,EAAUoC,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,SAElD,SAAC,KAAD,WACG,UAACxC,EAAUyC,oBAAX,QAA2BzC,EAAU0C,gBAAgBC,MACpD,EACA,MAIJ,UAAC,KAAD,YACE,SAAC,KAAD,CAAejB,GAAG,WAAWhB,MAAOV,EAAU4C,SAA9C,UACGzB,EAAAA,EAAAA,GAAE,uBAEL,SAAC,KAAD,CAAeO,GAAG,OAAlB,UAA0BP,EAAAA,EAAAA,GAAE,mBAC5B,SAAC,KAAD,CAAeO,GAAG,UAAlB,UACGP,EAAAA,EAAAA,GAAE,sBAEL,SAAC,KAAD,CAAeO,GAAG,UAAlB,UACGP,EAAAA,EAAAA,GAAE,sBAEL,SAAC,IAAD,CAAWgB,QA9DD,WACtBtC,EAAqBS,EAAOO,SAJ5BE,GAAUD,EAMX,EA2DkDA,MAAOA,EAA5C,SACGA,GAAQK,EAAAA,EAAAA,GAAE,kBAAmBA,EAAAA,EAAAA,GAAE,4BAMxC,SAAC,EAAA0B,SAAD,CACEC,UACE,SAAC,KAAD,CAAKC,QAAQ,OAAOC,eAAe,SAAnC,UACE,SAAC,KAAD,CACEC,OAAO,MACPnB,MAAM,MACNoB,MAAM,UACNC,UAAU,yBACVC,SAAS,MARjB,UAaE,SAAC,KAAD,MAGDpC,IACC,SAAC,IAAD,CAAOqC,QAASjC,EAAhB,UACE,gBACEU,MAAM,OACNC,IACE/B,EAAUgC,YAAV,0CACuChC,EAAUgC,aAC7CC,EAENC,IAAG,UAAKlC,EAAUsD,yBAQjC,C","sources":["pages/MovieDetails.js"],"sourcesContent":["import {\n  DetailsDescr,\n  DetailsImg,\n  DetailsName,\n} from 'components/DetailsComps/DetailsComps';\nimport {\n  StyledBtn,\n  StyledLinkBtn,\n  BackLinkBtn,\n} from 'components/Buttons/Buttons';\nimport {\n  PageWrap,\n  Box,\n  MainInfo,\n  BtnContainer,\n  ImgThumb,\n} from 'components/Box/Box';\nimport { useState, useEffect, useRef } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { fetchMovieById } from 'services/api';\nimport PageError from 'pages/PageError';\nimport Modal from 'components/Modal/Modal';\nimport imageplaceholder from 'images/noposter.jpg';\nimport { Suspense } from 'react';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport PropTypes from 'prop-types';\nimport { t } from 'i18next';\n\nexport default function MovieDetails({ toggleMovieInLibrary, movies }) {\n  const [movieItem, setMovieItem] = useState(null);\n  const [error, setError] = useState(false);\n  const location = useLocation();\n  const params = useParams();\n  const backLink = useRef(location.state?.from ?? '/');\n  const [saved, setSaved] = useState(\n    movies.includes(params.movieId) ? true : false\n  );\n  const [showModal, setShowModal] = useState(false);\n  const lang = t('lang');\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  const toggleSaveBtn = () => {\n    setSaved(!saved);\n  };\n\n  const handleSaveToLib = () => {\n    toggleMovieInLibrary(params.movieId);\n    toggleSaveBtn();\n  };\n\n  useEffect(() => {\n    fetchMovieById(params.movieId, lang)\n      .then(data => {\n        setMovieItem(data);\n      })\n      .catch(error => {\n        setError(true);\n      });\n  }, [lang, params.movieId]);\n\n  return (\n    <PageWrap>\n      <BackLinkBtn to={backLink.current}>\n        {!backLink.current.pathname ? t('buttons.home') : t('buttons.back')}\n      </BackLinkBtn>\n\n      {error && <PageError />}\n\n      {movieItem && (\n        <>\n          <DetailsName>{movieItem.title}</DetailsName>\n          <MainInfo>\n            <ImgThumb>\n              <DetailsImg\n                width=\"200\"\n                src={\n                  movieItem.poster_path\n                    ? `https://image.tmdb.org/t/p/w200/${movieItem.poster_path}`\n                    : imageplaceholder\n                }\n                alt={`${movieItem.title}`}\n                onClick={toggleModal}\n              />\n            </ImgThumb>\n\n            <Box>\n              <DetailsDescr>\n                {movieItem.genres.map(genre => genre.name).join(', ')}\n              </DetailsDescr>\n              <DetailsDescr>\n                {(movieItem.release_date ?? movieItem.first_air_date).slice(\n                  0,\n                  4\n                )}\n              </DetailsDescr>\n\n              <BtnContainer>\n                <StyledLinkBtn to=\"overview\" state={movieItem.overview}>\n                  {t('buttons.overview')}\n                </StyledLinkBtn>\n                <StyledLinkBtn to=\"cast\">{t('buttons.cast')}</StyledLinkBtn>\n                <StyledLinkBtn to=\"reviews\">\n                  {t('buttons.reviews')}\n                </StyledLinkBtn>\n                <StyledLinkBtn to=\"trailer\">\n                  {t('buttons.trailer')}\n                </StyledLinkBtn>\n                <StyledBtn onClick={handleSaveToLib} saved={saved}>\n                  {saved ? t('buttons.saved') : t('buttons.save')}\n                </StyledBtn>\n              </BtnContainer>\n            </Box>\n          </MainInfo>\n\n          <Suspense\n            fallback={\n              <Box display=\"flex\" justifyContent=\"center\">\n                <ThreeCircles\n                  height=\"100\"\n                  width=\"100\"\n                  color=\"#bcc3ce\"\n                  ariaLabel=\"Three-Circles-rotating\"\n                  visible={true}\n                />\n              </Box>\n            }\n          >\n            <Outlet />\n          </Suspense>\n\n          {showModal && (\n            <Modal onClose={toggleModal}>\n              <img\n                width=\"100%\"\n                src={\n                  movieItem.poster_path\n                    ? `https://image.tmdb.org/t/p/w500/${movieItem.poster_path}`\n                    : imageplaceholder\n                }\n                alt={`${movieItem.original_title}`}\n              />\n            </Modal>\n          )}\n        </>\n      )}\n    </PageWrap>\n  );\n}\n\nMovieDetails.propTypes = {\n  toggleMovieInLibrary: PropTypes.func.isRequired,\n  movies: PropTypes.array.isRequired,\n};\n"],"names":["MovieDetails","toggleMovieInLibrary","movies","useState","movieItem","setMovieItem","error","setError","location","useLocation","params","useParams","backLink","useRef","state","from","includes","movieId","saved","setSaved","showModal","setShowModal","lang","t","toggleModal","useEffect","fetchMovieById","then","data","catch","to","current","pathname","title","width","src","poster_path","imageplaceholder","alt","onClick","genres","map","genre","name","join","release_date","first_air_date","slice","overview","Suspense","fallback","display","justifyContent","height","color","ariaLabel","visible","onClose","original_title"],"sourceRoot":""}